import React, { useEffect, useState } from "react";

const App = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [city, setCity] = useState("Dhaka");
  const [weatherData, setWeatherData] = useState(null);
  const [error, setError] = useState(null);
  const API_key = "99fe690870d1ccf2de11c285df7d1f95";
  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    fetchWeatherData();
  }, [city]);

  const fetchWeatherData = async () => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`
      );
      const data = await response.json();
      if (response.ok) {
        setWeatherData(data);
        setError(null);
      } else {
        setWeatherData(null);
        setError("Error fetching the weather data");
      }
    } catch (error) {
      console.log("Error fetching weather data: ", error);
      setWeatherData(null);
      setError("Error fetching the weather data");
    }
  };

  const handleInputChange = (e) => {
    setCity(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetchWeatherData();
  };

  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const month = months[currentTime.getMonth()];
  const day = currentTime.getDate();
  const year = currentTime.getFullYear();
  let hours = currentTime.getHours();
  const minutes = currentTime.getMinutes().toString().padStart(2, "0");
  const seconds = currentTime.getSeconds().toString().padStart(2, "0");
  const ampm = hours >= 12 ? "PM" : "AM";
  hours = hours % 12 || 12; // Convert to 12-hour format

  // Convert temperature from Kelvin to Celsius
  const tempCelsius =
    weatherData && weatherData.main ? weatherData.main.temp - 273.15 : null;

  return (
    <>
      <div
        id="container"
        className="flex flex-col h-[667px] w-[375px] mx-auto mt-8 rounded-xl bg-gradient-to-b from-light-blue to-dark-blue"
      >
        <div className="date w-80 h-20 text-slate-100 text-3xl mx-auto text-center flex justify-center items-center mt-8 flex-col">
          <h1>{`${month} ${day}, ${year}`}</h1>
          <div className="time flex text-xl mt-3">
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{`${hours}`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{`${minutes}`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{`${seconds}`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 font-bold text-xl">{` ${ampm}`}</div>
          </div>
        </div>
        <div className="date w-72 h-14 bg-blue-500 text-slate-100 text-5xl mx-auto text-center flex justify-center items-center mt-4 font-bold">
          {city}
        </div>
        <div className="image h-40 w-40 bg-slate-400 flex justify-center items-center mx-auto mt-8">
          <img src="clear.png" alt="weather icon" className="w-32 h-32" />
        </div>
        <div className="date w-80 h-16 bg-blue-500 text-slate-100 text-7xl mx-auto text-center flex justify-center items-center mt-6">
          {tempCelsius !== null ? `${tempCelsius.toFixed(1)}°C` : "..."}
        </div>
        <div className="weatherCondition bg-green-400 h-10 w-40 mx-auto mt-4 text-center flex justify-center items-center">
          weather condition
        </div>
        <form
          onSubmit={handleSubmit}
          className="mx-auto mt-4 inputs w-[350px] bg-blue-300 h-20 flex justify-around"
        >
          <input
            type="text"
            placeholder="Enter city name"
            value={city}
            onChange={handleInputChange}
            className="bg-yellow-400 h-14 my-auto w-60 pl-2 text-xl"
          />
          <button
            type="submit"
            className="bg-pink-600 h-14 my-auto w-20 text-center justify-center items-center text-2xl font-bold"
          >
            Get
          </button>
        </form>
        <div className="copyright text-slate-200 text-center  h-10 w-60 mx-auto mt-2 flex justify-center items-center">
          &copy;niloykumarmohonta
        </div>
      </div>
    </>
  );
};

export default App;


















import React, { useEffect, useState } from "react";

const App = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [city, setCity] = useState("Dhaka");
  const [weatherData, setWeatherData] = useState(null);
  const [error, setError] = useState(null);
  const API_key = "99fe690870d1ccf2de11c285df7d1f95";
  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    fetchWeatherData();
  }, [city]);

  const fetchWeatherData = async () => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`
      );
      const data = await response.json();
      if (response.ok) {
        setWeatherData(data);
        setError(null);
        console.log(weatherData);
      } else {
        setWeatherData(null);
        setError("Error fetching the weather data");
      }
    } catch (error) {
      console.log("Error fetching weather data: ", error);
      setWeatherData(null);
      setError("Error fetching the weather data");
    }
  };

  const handleInputChange = (e) => {
    setCity(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetchWeatherData();
  };

  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const month = months[currentTime.getMonth()];
  const day = currentTime.getDate();
  const year = currentTime.getFullYear();
  let hours = currentTime.getHours();
  const minutes = currentTime.getMinutes().toString().padStart(2, "0");
  const seconds = currentTime.getSeconds().toString().padStart(2, "0");
  const ampm = hours >= 12 ? "PM" : "AM";
  hours = hours % 12 || 12; // Convert to 12-hour format

  // Convert temperature from Kelvin to Celsius
  const tempCelsius =
    weatherData && weatherData.main ? weatherData.main.temp - 273.15 : null;

  const idName = weatherData && weatherData.weather[0].id;
  console.log(idName);
  function getImageName(idName) {
    if (idName >= 200 && idName <= 232) {
      return "thunder.png";
    } else if (idName >= 300 && idName <= 321) {
      return "drizzle.png";
    } else if (idName >= 500 && idName <= 531) {
      return "rain.png";
    } else if (idName >= 600 && idName <= 622) {
      return "snow.png";
    } else if (idName >= 701 && idName <= 781) {
      return "atmosphere.png";
    } else if (idName === 800) {
      return "clear.png";
    } else if (idName >= 801 && idName <= 804) {
      return "atmosphere.png";
    } else {
      return " clear.png"; // Default case if idName doesn't match any condition
    }
  }
  return (
    <>
      <div
        id="container"
        className="flex flex-col h-[667px] w-[375px] mx-auto mt-4 rounded-xl bg-gradient-to-b from-light-blue to-dark-blue"
      >
        <div className="date w-80 h-20 text-slate-100 text-3xl mx-auto text-center flex justify-center items-center mt-8 flex-col">
          <h1>{`${month} ${day}, ${year}`}</h1>
          <div className="time flex text-xl mt-3">
            <div className="text-center flex justify-center items-center h-8 w-6 font-bold text-xl">{`${hours}`}</div>
            <div className="text-center flex justify-center items-center h-8 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-8 font-bold text-2xl ml-1">{`${minutes}`}</div>
            <div className="text-center flex justify-center items-center h-8 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-10 font-bold text-3xl ml-1">{`${seconds}`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 text-xl ml-1">{` ${ampm}`}</div>
          </div>
        </div>
        <div className=" date w-[372] h-16  text-slate-100 text-5xl mx-auto text-center flex justify-center items-center mt-4 font-bold">
          {weatherData ? weatherData.name : "Loading"}
        </div>
        <div className=" image h-40 w-40 flex justify-center items-center mx-auto mt-6">
          <img src={getImageName()} alt="weather icon" className="w-32 h-32" />
        </div>
        <div className=" date w-80 h-16  text-slate-100 text-7xl mx-auto text-center flex justify-center items-center mt-2">
          {tempCelsius !== null ? `${tempCelsius.toFixed(1)}°C` : "..."}
        </div>
        <div className="weatherCondition text-white h-10 w-40 mx-auto mt-4 text-center flex justify-center items-center">
          {weatherData ? weatherData.weather[0].description : "Loading..."}
        </div>
        <form
          onSubmit={handleSubmit}
          className="mx-auto mt-4 inputs w-[350px] h-20 flex justify-around"
        >
          <input
            type="text"
            placeholder="Enter city name"
            value={city}
            onChange={handleInputChange}
            className=" h-14 my-auto w-60 pl-4 text-2xl font-bold text-white bg-dark-blue rounded-md"
          />
          <button
            type="submit"
            className=" bg-light-blue text-blue-700 rounded-lg h-14 my-auto w-20 text-center justify-center items-center text-2xl font-bold"
          >
            Get
          </button>
        </form>
        <div className="copyright text-slate-200 text-center  h-10 w-60 mx-auto mt-2 flex justify-center items-center">
          &copy;niloykumarmohonta
        </div>
      </div>
    </>
  );
};

export default App;












import React, { useEffect, useState } from "react";

const App = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [city, setCity] = useState("Dhaka");
  const [weatherData, setWeatherData] = useState(null);
  const [error, setError] = useState(null);
  const API_key = "99fe690870d1ccf2de11c285df7d1f95";
  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    fetchWeatherData();
  }, [city]);

  const fetchWeatherData = async () => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`
      );
      const data = await response.json();
      if (response.ok) {
        setWeatherData(data);
        setError(null);
        console.log(weatherData);
      } else {
        setWeatherData(null);
        setError("Error fetching the weather data");
      }
    } catch (error) {
      console.log("Error fetching weather data: ", error);
      setWeatherData(null);
      setError("Error fetching the weather data");
    }
  };

  const handleInputChange = (e) => {
    setCity(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetchWeatherData();
  };

  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const month = months[currentTime.getMonth()];
  const day = currentTime.getDate();
  const year = currentTime.getFullYear();
  let hours = currentTime.getHours();
  const minutes = currentTime.getMinutes().toString().padStart(2, "0");
  const seconds = currentTime.getSeconds().toString().padStart(2, "0");
  const ampm = hours >= 12 ? "PM" : "AM";
  hours = hours % 12 || 12; // Convert to 12-hour format

  // Convert temperature from Kelvin to Celsius
  const tempCelsius =
    weatherData && weatherData.main ? weatherData.main.temp - 273.15 : null;

  const idName = weatherData && weatherData.weather[0].id;
  function getImageName(idName) {
    if (idName >= 200 && idName <= 232) {
      return "thunder.png";
    } else if (idName >= 300 && idName <= 321) {
      return "drizzle.png";
    } else if (idName >= 500 && idName <= 531) {
      return "rain.png";
    } else if (idName >= 600 && idName <= 622) {
      return "snow.png";
    } else if (idName >= 701 && idName <= 781) {
      return "atmosphere.png";
    } else if (idName === 800) {
      return "clear.png";
    } else if (idName >= 801 && idName <= 804) {
      return "atmosphere.png";
    } else {
      return " clear.png"; // Default case if idName doesn't match any condition
    }
  }
  return (
    <>
      <div
        id="container"
        className="flex flex-col h-[667px] w-[375px] mx-auto mt-4 rounded-xl bg-gradient-to-b from-light-blue to-dark-blue"
      >
        <div className="date w-80 h-20 text-slate-100 text-3xl mx-auto text-center flex justify-center items-center mt-8 flex-col">
          <h1>{`${month} ${day}, ${year}`}</h1>
          <div className="time flex text-xl mt-3">
            <div className="text-center flex justify-center items-center h-8 w-6 font-bold text-xl">{`${hours}`}</div>
            <div className="text-center flex justify-center items-center h-8 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-8 font-bold text-2xl ml-1">{`${minutes}`}</div>
            <div className="text-center flex justify-center items-center h-8 font-bold text-xl">{`:`}</div>
            <div className="text-center flex justify-center items-center h-8 w-10 font-bold text-3xl ml-1">{`${seconds}`}</div>
            <div className="text-center flex justify-center items-center h-8 w-7 text-xl ml-1">{` ${ampm}`}</div>
          </div>
        </div>
        <div className=" date w-[372] h-16  text-slate-100 text-5xl mx-auto text-center flex justify-center items-center mt-4 font-bold">
          {weatherData ? weatherData.name : "Loading"}
        </div>
        <div className="  image h-40 w-72 flex justify-center items-center mx-auto mt-6">
          <img
            src={getImageName(idName)}
            alt="weather icon"
            className="h-40 w-auto"
          />
        </div>
        <div className=" date w-80 h-16  text-slate-100 text-7xl mx-auto text-center flex justify-center items-center mt-2">
          {tempCelsius !== null ? `${tempCelsius.toFixed(1)}°C` : "..."}
        </div>
        <div className="weatherCondition text-white h-10 w-40 mx-auto mt-4 text-center flex justify-center items-center">
          {weatherData ? weatherData.weather[0].description : "Loading..."}
        </div>
        <form
          onSubmit={handleSubmit}
          className="mx-auto mt-4 inputs w-[350px] h-20 flex justify-around"
        >
          <input
            type="text"
            placeholder="Enter city name"
            value={city}
            onChange={handleInputChange}
            className=" h-14 my-auto w-60 pl-4 text-2xl font-bold text-white bg-dark-blue rounded-md"
          />
          <button
            type="submit"
            className=" bg-light-blue text-blue-700 rounded-lg h-14 my-auto w-20 text-center justify-center items-center text-2xl font-bold"
          >
            Get
          </button>
        </form>
        <div className="copyright text-slate-200 text-center  h-10 w-60 mx-auto mt-2 flex justify-center items-center">
          &copy;niloykumarmohonta
        </div>
      </div>
    </>
  );
};

export default App;
